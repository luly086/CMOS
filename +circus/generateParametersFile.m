function generateParametersFile(parameters_file, mapping_file, nb_channels, spike_threshold )

%%% Note that depending on the file format selected, the parameters in the data section can vary
%%% You should refer to the documentation to know what are the needed parameters for a given
%%% file format. Otherwise, launch the code and a message will tell you what is needed

fid = fopen( parameters_file , 'w');
fprintf(fid, '[data]\n');
fprintf(fid, 'file_format    = raw_binary                      # Can be raw_binary, openephys, hdf5, ... See >> spyking-circus help -i for more info\n');
fprintf(fid, 'stream_mode    = multi-files                  # None by default. Can be multi-files, or anything depending to the file format\n');
fprintf(fid, ['mapping        = ' mapping_file '\n']);
fprintf(fid, 'suffix         =                       # Suffix to add to generated files\n');
fprintf(fid, 'global_tmp     = True                  # should be False if local /tmp/ has enough space (better for clusters)\n');
fprintf(fid, 'overwrite      = True                  # Filter or remove artefacts on site (if write access is possible). Data are duplicated otherwise\n');
fprintf(fid, '\n');
fprintf(fid, 'data_dtype    = uint16\n');
fprintf(fid, ['nb_channels   = ' num2str(nb_channels) '\n']);
fprintf(fid, '\n');
fprintf(fid, 'sampling_rate = 20000\n');
fprintf(fid, '\n');
fprintf(fid, '\n');
fprintf(fid, '[detection]\n');
fprintf(fid, 'radius         = auto       # Radius [in um] (if auto, read from the prb file)\n');
fprintf(fid, 'N_t            = 5          # Width of the templates [in ms]\n');
fprintf(fid,['spike_thresh   = ' num2str(spike_threshold) '          # Threshold for spike detection\n']);
fprintf(fid, 'peaks          = negative   # Can be negative (default), positive or both\n');
fprintf(fid, 'matched-filter = False      # If True, we perform spike detection with matched filters\n');
fprintf(fid, 'matched_thresh = 5          # Threshold for detection if matched filter is True\n');
fprintf(fid, 'alignment      = True       # Realign the waveforms by oversampling\n');
fprintf(fid, '\n');
fprintf(fid, '[filtering]\n');
fprintf(fid, 'cut_off        = 500, auto  # Min and Max (auto=nyquist) cut off frequencies for the band pass butterworth filter [Hz]\n');
fprintf(fid, 'filter         = True       # If True, then a low-pass filtering is performed\n');
fprintf(fid, 'remove_median  = False      # If True, median over all channels is substracted to each channels (movement artifacts)\n');
fprintf(fid, '\n');
fprintf(fid, '[triggers]\n');
fprintf(fid, 'trig_file      =            # External stimuli to be considered as putative artefacts [in trig units] (see documentation) \n');
fprintf(fid, 'trig_windows   =            # The time windows of those external stimuli [in trig units]\n');
fprintf(fid, 'trig_unit      = ms         # The unit in which times are expressed: can be either ms or timestep\n');
fprintf(fid, 'clean_artefact = False      # If True, external artefacts induced by triggers will be suppressed from data\n');
fprintf(fid, 'make_plots     = png           # Generate sanity plots of the averaged artefacts [Nothing or None if no plots]\n');
fprintf(fid, '\n');
fprintf(fid, '[whitening]\n');
fprintf(fid, 'chunk_size     = 10         # Size of the data chunks [in s]\n');
fprintf(fid, 'safety_time    = 1          # Temporal zone around which templates are isolated [in ms, or auto]\n');
fprintf(fid, 'temporal       = False      # Perform temporal whitening\n');
fprintf(fid, 'spatial        = True       # Perform spatial whitening\n');
fprintf(fid, 'max_elts       = 10000      # Max number of events per electrode (should be compatible with nb_elts)\n');
fprintf(fid, 'nb_elts        = 0.8        # Fraction of max_elts that should be obtained per electrode [0-1]\n');
fprintf(fid, 'output_dim     = 5          # Can be in percent of variance explain, or num of dimensions for PCA on waveforms\n');
fprintf(fid, '\n');
fprintf(fid, '[clustering]\n');
fprintf(fid, 'extraction     = median-raw # Can be either median-raw (default), median-pca, mean-pca, mean-raw\n');
fprintf(fid, 'safety_space   = True       # If True, we exclude spikes in the vicinity of a selected spikes\n');
fprintf(fid, 'safety_time    = auto       # Temporal zone around which templates are isolated [in ms, or auto]\n');
fprintf(fid, 'max_elts       = 10000      # Max number of events per electrode (should be compatible with nb_elts)\n');
fprintf(fid, 'nb_elts        = 0.8        # Fraction of max_elts that should be obtained per electrode [0-1]\n');
fprintf(fid, 'nclus_min      = 0.002      # Min number of elements in a cluster (given in percentage) [0-1]\n');
fprintf(fid, 'max_clusters   = 10         # Maximal number of clusters for every electrodes\n');
fprintf(fid, 'nb_repeats     = 3          # Number of passes used for the clustering\n');
fprintf(fid, 'smart_search   = True       # Activate the smart search mode\n');
fprintf(fid, 'smart_select   = False      # Experimental: activate the smart selection of centroids (max_clusters is ignored)\n');
fprintf(fid, 'sim_same_elec  = 3          # Distance within clusters under which they are re-merged\n');
fprintf(fid, 'cc_merge       = 0.975      # If CC between two templates is higher, they are merged\n');
fprintf(fid, 'dispersion     = (5, 5)     # Min and Max dispersion allowed for amplitudes [in MAD]\n');
fprintf(fid, 'noise_thr      = 0.8        # Minimal amplitudes are such than amp*min(templates) < noise_thr*threshold in [0-1]\n');
fprintf(fid, 'remove_mixture = True       # At the end of the clustering, we remove mixtures of templates\n');
fprintf(fid, 'make_plots     = png       # Generate sanity plots of the clustering [Nothing or None if no plots]\n');
fprintf(fid, '\n');
fprintf(fid, '[fitting]\n');
fprintf(fid, 'chunk_size     = 1          # Size of chunks used during fitting [in second]\n');
fprintf(fid, 'gpu_only       = False      # Use GPU for computation of b''s AND fitting [not optimized yet]\n');
fprintf(fid, 'amp_limits     = (0.3, 5)   # Amplitudes for the templates during spike detection [if not auto]\n');
fprintf(fid, 'amp_auto       = True       # True if amplitudes are adjusted automatically for every templates\n');
fprintf(fid, 'max_chunk      = inf        # Fit only up to max_chunk   \n');
fprintf(fid, 'collect_all    = False      # If True, one garbage template per electrode is created, to store unfitted spikes\n');
fprintf(fid, '\n');
fprintf(fid, '[merging]\n');
fprintf(fid, 'cc_overlap     = 0.5        # Only templates with CC higher than cc_overlap may be merged\n');
fprintf(fid, 'cc_bin         = 2          # Bin size for computing CC [in ms]\n');
fprintf(fid, 'correct_lag    = True       # If spikes are aligned when merging. May be better for phy usage\n');
fprintf(fid, '\n');
fprintf(fid, '[converting]\n');
fprintf(fid, 'erase_all      = True       # If False, a prompt will ask you to export if export has already been done\n');
fprintf(fid, 'export_pcs     = prompt     # Can be prompt [default] or in none, all, some\n');
fprintf(fid, 'export_all     = False      # If True, unfitted spikes will be exported as the last Ne templates\n');
fprintf(fid, 'sparse_export  = False      # For recent versions of phy, and large number of templates/channels\n');
fprintf(fid, '\n');
fprintf(fid, '[validating]\n');
fprintf(fid, 'nearest_elec   = auto       # Validation channel (e.g. electrode closest to the ground truth cell)\n');
fprintf(fid, 'max_iter       = 200        # Maximum number of iterations of the stochastic gradient descent (SGD)\n');
fprintf(fid, 'learning_rate  = 1.0e-3     # Initial learning rate which controls the step-size of the SGD\n');
fprintf(fid, 'roc_sampling   = 10         # Number of points to estimate the ROC curve of the BEER estimate\n');
fprintf(fid, 'test_size      = 0.3        # Portion of the dataset to include in the test split\n');
fprintf(fid, 'radius_factor  = 0.5        # Radius factor to modulate physical radius during validation\n');
fprintf(fid, 'juxta_dtype    = uint16     # Type of the juxtacellular data\n');
fprintf(fid, 'juxta_thresh   = 6          # Threshold for juxtacellular detection\n');
fprintf(fid, 'juxta_valley   = False      # True if juxta-cellular spikes are negative peaks\n');
fprintf(fid, 'make_plots     = png        # Generate sanity plots of the validation [Nothing or None if no plots]\n');
fprintf(fid, '\n');
fprintf(fid, '[extracting]\n');
fprintf(fid, 'safety_time    = 1          # Temporal zone around which spikes are isolated [in ms]\n');
fprintf(fid, 'max_elts       = 1000       # Max number of collected events per templates\n');
fprintf(fid, 'output_dim     = 5          # Percentage of variance explained while performing PCA\n');
fprintf(fid, 'cc_merge       = 0.975      # If CC between two templates is higher, they are merged\n');
fprintf(fid, 'noise_thr      = 0.8        # Minimal amplitudes are such than amp*min(templates) < noise_thr*threshold\n');
fprintf(fid, '\n');
fprintf(fid, '[noedits]\n');
fprintf(fid, 'filter_done    = False              #!! AUTOMATICALLY EDITED: DO NOT MODIFY !!\n');
fprintf(fid, 'artefacts_done = False      # Will become True automatically after removing artefacts\n');
fprintf(fid, 'median_done    = False      # Will become True automatically after removing common median\n');
fclose(fid);
